;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC br.com.example.service.client.Example Client Implementation
;;;----------------------------------------------------------------------------------
(ns br.com.example.service.client.Example.client
  (:require [br.com.example.service.client :refer :all]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn Authenticate
  ([client params] (Authenticate client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "br.com.example.service.client.Example"
              :method  "Authenticate"
              :input   {:f br.com.example.service.client/new-AuthRequest :ch input}
              :output  {:f br.com.example.service.client/pb->AuthResponse :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

