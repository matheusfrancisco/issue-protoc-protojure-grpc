;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package service.example.client
;;;----------------------------------------------------------------------------------
(ns service.example.client
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->AuthRequest)
(declare ecis->AuthRequest)
(declare new-AuthRequest)
(declare cis->AuthResponse)
(declare ecis->AuthResponse)
(declare new-AuthResponse)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; AuthRequest
;-----------------------------------------------------------------------------
(defrecord AuthRequest-record [email password]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:email this) os)
    (serdes.core/write-String 2  {:optimize true} (:password this) os))
  pb/TypeReflection
  (gettype [this]
    "service.example.client.AuthRequest"))

(s/def :service.example.client.AuthRequest/email string?)
(s/def :service.example.client.AuthRequest/password string?)
(s/def ::AuthRequest-spec (s/keys :opt-un [:service.example.client.AuthRequest/email :service.example.client.AuthRequest/password ]))
(def AuthRequest-defaults {:email "" :password "" })

(defn cis->AuthRequest
  "CodedInputStream to AuthRequest"
  [is]
  (->> (tag-map AuthRequest-defaults
         (fn [tag index]
             (case index
               1 [:email (serdes.core/cis->String is)]
               2 [:password (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->AuthRequest-record)))

(defn ecis->AuthRequest
  "Embedded CodedInputStream to AuthRequest"
  [is]
  (serdes.core/cis->embedded cis->AuthRequest is))

(defn new-AuthRequest
  "Creates a new instance from a map, similar to map->AuthRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::AuthRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::AuthRequest-spec init))))]}
  (-> (merge AuthRequest-defaults init)
      (map->AuthRequest-record)))

(defn pb->AuthRequest
  "Protobuf to AuthRequest"
  [input]
  (cis->AuthRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record AuthRequest-meta {:type "service.example.client.AuthRequest" :decoder pb->AuthRequest})

;-----------------------------------------------------------------------------
; AuthResponse
;-----------------------------------------------------------------------------
(defrecord AuthResponse-record [session-id]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:session-id this) os))
  pb/TypeReflection
  (gettype [this]
    "service.example.client.AuthResponse"))

(s/def :service.example.client.AuthResponse/session-id string?)
(s/def ::AuthResponse-spec (s/keys :opt-un [:service.example.client.AuthResponse/session-id ]))
(def AuthResponse-defaults {:session-id "" })

(defn cis->AuthResponse
  "CodedInputStream to AuthResponse"
  [is]
  (->> (tag-map AuthResponse-defaults
         (fn [tag index]
             (case index
               1 [:session-id (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->AuthResponse-record)))

(defn ecis->AuthResponse
  "Embedded CodedInputStream to AuthResponse"
  [is]
  (serdes.core/cis->embedded cis->AuthResponse is))

(defn new-AuthResponse
  "Creates a new instance from a map, similar to map->AuthResponse except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::AuthResponse-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::AuthResponse-spec init))))]}
  (-> (merge AuthResponse-defaults init)
      (map->AuthResponse-record)))

(defn pb->AuthResponse
  "Protobuf to AuthResponse"
  [input]
  (cis->AuthResponse (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record AuthResponse-meta {:type "service.example.client.AuthResponse" :decoder pb->AuthResponse})

